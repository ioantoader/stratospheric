name: AWS Deployment

on:
  push:
    paths:
      - 'application/**'
      - 'cloudformation/**'

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build and deploy Todo App
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Build application
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd application
          ./gradlew build --stacktrace

      - name: Zip build reports
        if: failure()
        run: zip -r reports.zip **/build/reports

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Unit Test Results
          files: application/build/test-results/**/*.xml
          report_individual_runs: true
          deduplicate_classes_by_file_name: false

      - name: Upload build reports
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: reports
          path: reports.zip

      - name: Create or update ECR registry stack
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd cloudformation/application-setup-basic/stacks/registry
          ./create-or-update-registry-stack.sh

      - name: Create or update Cognito stack
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd cloudformation/application-setup-basic/stacks/cognito
          ./create-or-update-cognito-stack.sh

      - name: Publish Docker image to ECR registry
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd application
          docker build -t todo-app .
          docker tag todo-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/stratospheric:${GITHUB_RUN_NUMBER}
          docker tag todo-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/stratospheric:latest
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/stratospheric:${GITHUB_RUN_NUMBER}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/stratospheric:latest

      - name: Create or update application stack
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd cloudformation/application-setup-basic/stacks/application
          ./create-or-update-application-stack.sh ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/stratospheric:${GITHUB_RUN_NUMBER}
